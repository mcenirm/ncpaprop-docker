#!/usr/bin/env python3
import argparse
import glob
import re
import sys
from pathlib import Path

import docker

if __name__ == "__main__":
    build_context_prefix = "build"
    build_context_prefix_pattern = re.escape(build_context_prefix)
    build_context_prefix_glob = glob.escape(build_context_prefix) + "*"

    container_tech_names = ["docker"]
    container_tech_pattern_prefix = ""
    container_tech_pattern_suffix = ""
    if container_tech_names:
        if len(container_tech_names) > 1:
            _ = "|".join(map(re.escape, container_tech_names))
            _ = f"(?:{_})"
        else:
            _ = re.escape(container_tech_names[0])
        container_tech_pattern_prefix = f"(?:{_}-)?"
        container_tech_pattern_suffix = f"(?:-{_})?"

    pattern_image_prefix_from_directory_name = re.compile(
        f"{container_tech_pattern_prefix}(?P<name>.*?){container_tech_pattern_suffix}$"
    )
    pattern_image_name_from_build_context_name = re.compile(
        f"(?:{build_context_prefix_pattern}-?\\d*-?)?(?P<name>[^,/]+)(?P<rest>.*)"
    )
    pattern_image_tag_from_rest = re.compile(r",(?P<tag>[^,/]+)(?P<rest>.*)")

    argv = sys.argv
    program_name = argv[0]
    argument_list = argv[1:]
    parent = Path.cwd()
    default_image_prefix = re.match(
        pattern_image_prefix_from_directory_name, parent.name,
    ).group("name")
    default_image_prefix += "-"
    parser = argparse.ArgumentParser(
        prog=program_name, formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--image-prefix", help="Prefix for image names", default=default_image_prefix,
    )
    parser.add_argument(
        "contexts",
        metavar="BUILDCONTEXT",
        nargs="+",
        help="context directories for images to build",
    )
    args = parser.parse_args(argument_list)
    image_prefix = args.image_prefix
    build_context_list = args.contexts

    client = docker.from_env()

    for build_context in build_context_list:
        context_name = Path(build_context).name
        print()
        print("==")
        print("==", context_name)
        print("==")
        print()
        name = None
        tag_list = []
        rest = context_name
        name_matches = pattern_image_name_from_build_context_name.match(context_name)
        if name_matches:
            name = name_matches.group("name")
            rest = name_matches.group("rest")
        tag_matches = True
        while tag_matches:
            tag_matches = pattern_image_tag_from_rest.match(rest)
            if tag_matches:
                tag = tag_matches.group("tag")
                rest = tag_matches.group("rest")
                tag_list.append(tag)
        if not tag_list:
            tag_list = ["latest"]
        name = f"{image_prefix}{name}"
        build_args = dict(image_prefix=image_prefix)
        try:
            image, logs = client.images.build(
                path=str(build_context),
                tag=f"{name}:{tag_list[0]}",
                buildargs=build_args,
            )
            for log in logs:
                if "stream" in log:
                    print(log["stream"], end="")
                else:
                    print(log)
            print(image.tags)
            for tag in tag_list[1:]:
                image.tag(tag)
        except docker.errors.BuildError as be:
            exit_code = None
            for log in be.build_log:
                if "stream" in log:
                    print(log["stream"], end="")
                else:
                    print(log)
                exit_code = log.get("errorDetail", {}).get("code", None)
            print(be.msg, file=sys.stderr)
            if exit_code:
                sys.exit(exit_code)
    sys.exit(0)
